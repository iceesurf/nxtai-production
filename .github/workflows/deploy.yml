name: Deploy NXT.AI

on:
  push:
    branches:
      - main
      - develop
      - staging
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stg
          - prod

env:
  NODE_VERSION: '20'

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      project_id: ${{ steps.set-env.outputs.project_id }}
    steps:
      - id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "project_id=nxt-ai-${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "project_id=nxt-ai-prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "environment=stg" >> $GITHUB_OUTPUT
            echo "project_id=nxt-ai-stg" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "project_id=nxt-ai-dev" >> $GITHUB_OUTPUT
          fi

  build-and-test:
    runs-on: ubuntu-latest
    needs: determine-environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build shared package
        run: npm run build:shared
      
      - name: Build web application
        run: npm run build:web
        env:
          VITE_APP_ENV: ${{ needs.determine-environment.outputs.environment }}
          VITE_FIREBASE_PROJECT_ID: ${{ needs.determine-environment.outputs.project_id }}
      
      - name: Build functions
        run: npm run build:functions
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            packages/*/dist
            packages/*/lib
          retention-days: 7

  deploy-firebase:
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-test]
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup Firebase CLI
        run: npm install -g firebase-tools
      
      - name: Set Firebase project
        run: firebase use ${{ needs.determine-environment.outputs.project_id }}
      
      - name: Deploy to Firebase
        run: |
          # Deploy step by step for better error handling
          firebase deploy --only firestore:rules,storage:rules
          firebase deploy --only functions
          firebase deploy --only hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      
      - name: Run post-deployment tests
        run: |
          sleep 30
          # Test if hosting is accessible
          URL="https://${{ needs.determine-environment.outputs.project_id }}.web.app/"
          if curl -f -s "$URL" > /dev/null; then
            echo "✅ Application accessible at $URL"
          else
            echo "❌ Application not accessible"
            exit 1
          fi
          echo "✅ Deployment successful!"

  notify:
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-firebase]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.deploy-firebase.result }}" == "success" ]]; then
            echo "🚀 Deployment to ${{ needs.determine-environment.outputs.environment }} successful!"
            echo "📱 App URL: https://${{ needs.determine-environment.outputs.project_id }}.web.app/"
          else
            echo "❌ Deployment to ${{ needs.determine-environment.outputs.environment }} failed!"
            exit 1
          fi
